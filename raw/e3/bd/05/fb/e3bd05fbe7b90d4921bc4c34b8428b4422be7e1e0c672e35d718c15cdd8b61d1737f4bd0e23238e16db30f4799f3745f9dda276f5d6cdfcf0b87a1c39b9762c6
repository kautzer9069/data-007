 ///
 /// @file    weak_ptr.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-06-23 11:48:36
 ///
 
#include <iostream>
#include <memory>
using std::cout;
using std::endl;
using std::shared_ptr;
using std::weak_ptr;
 
class Point
{
public:
	Point(int ix, int iy)
	: _ix(ix)
	, _iy(iy)
	{	cout << "Point(int,int)" << endl;	}
	
	void print() const
	{
		cout << "(" << _ix
			 << "," << _iy
			 << ")" << endl;
	}

	~Point()
	{	cout << "~Point()" << endl;	}


	friend std::ostream & operator<<(std::ostream & os, const Point & rhs);
private:
	int _ix;
	int _iy;
};

std::ostream & operator<<(std::ostream & os, const Point & rhs)
{
	os << "(" << rhs._ix
	   << "," << rhs._iy
	   << ")" ;
	return os;
}
int main(void)
{
	weak_ptr<Point> wp;// weak_ptr是不能直接访问资源
	{
		shared_ptr<Point> sp(new Point(1, 2));

		wp = sp;
		
		shared_ptr<Point> sp2 = wp.lock();
		if(sp2)
		{
			cout << "sp2.'s use_count = " << sp2.use_count() << endl;
			cout << "weak_ptr提升成功" << endl;
			sp2->print();
			cout << "*sp2 = " << *sp2 << endl;
		} else
		{
			cout << "weak_ptr提升失败, 托管的对象已经被销毁" << endl;
		}
	}
	cout << endl << "在语句块之外:" << endl;

	shared_ptr<Point> sp2 = wp.lock();
	if(sp2)
	{
		cout << "sp2.'s use_count = " << sp2.use_count() << endl;
		cout << "weak_ptr提升成功" << endl;
		sp2->print();
		cout << "*sp2 = " << *sp2 << endl;
	} else
	{
		cout << "weak_ptr提升失败, 托管的对象已经被销毁" << endl;
	}

	return 0;
}
