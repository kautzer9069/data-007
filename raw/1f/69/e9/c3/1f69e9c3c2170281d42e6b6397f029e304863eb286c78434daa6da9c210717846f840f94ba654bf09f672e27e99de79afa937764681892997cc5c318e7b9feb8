
[切记：一定要多动手敲代码，现在主要是练习，
  　　 通过敲代码的方式复习巩固之前的学习过的语法知识，
  　　 敲得越多，越能深刻理解语法知识；
  　　 而调试程序也是非常重要的能力，必须要让程序在机器上
    　 跑起来，才能完成一个学习的闭环～]

1. C++11为什么要引入右值引用？
	临时对象的构造和析构带来了不必要的资源拷贝。
	使用右值引用，在语法层面识别临时对象，在使用临时对象构造新对象的时候，降临时对象的资源转移到新对象中，消除不必要的拷贝。


2. 为深拷贝的String类，添加移动构造函数和移动赋值运算符函数
   String(String &&rhs);
   String & operator=(String &&rhs);
   
3. std::move的作用是什么？
    若某对象不再使用，且想把它用转移构造函数，或转移赋值函数来调用，此时可以用std：：move（），把左值引用转换为右值引用来使用。
   
4. 智能指针的实现原理是什么？
  通过重载->和*,实现以指针的方式，访问类成员
  在获得资源的同时，构造了对象。
  在离开作用域时，自动调用了析构函数，释放了资源。

5. C++提供了哪几种智能指针，其各自的特点是什么？
std::auto_ptr：支持复制与赋值操作，值语义，操作完成后rhs不再托管原资源，造成语句字面意思和实际结果不一致
std::unique_ptr :表达对象语义，复制或赋值的时候，程序会报错。但是内置有移动赋值运算符函数，支持=右值操作
std::shared_ptr :表达复制语义，复制时将引用计数+1，共同使用同一个底层对象。属于强引用指针，会发生循环引用问题。  
std::weak_ptr : 弱引用指针，复制或者赋值时不会发生引用计数+1，不能直接访问资源，如果要直接访问，需要用wp.lock()方法，将weak_ptr提升为shared_ptr

6. 将STL中的大作业文本查询用智能指针的方式再实现一遍
	【参考C++ Primer 第5版的实现】

7. 预习继承的内容