 ///
 /// @file    circleReference.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-06-23 11:25:34
 ///
 
#include <iostream>
#include <memory>
using std::cout;
using std::endl;
using std::shared_ptr;
using std::weak_ptr;



//shared_ptr发生了循环引用，导致内存泄漏
class Child;

class Parent
{
public:	
	Parent(){	cout << "Parent()" << endl;	}

	~Parent() {	cout << "~Parent()" << endl;	}

	weak_ptr<Child> _pChild;//weak_ptr能够解决shread_ptr的循环引用问题
							//weak_ptr只知道对象是否还存活, 不能直接访问资源

};

class Child
{
public:
	Child(){	cout << "Child()" << endl;	}
	~Child(){	cout << "~Child()" << endl;	}

	shared_ptr<Parent> _pParent;
};
 
int main(void)
{
	shared_ptr<Parent> pParent(new Parent);
	shared_ptr<Child> pChild(new Child);
	cout << "pParent's use_count = " << pParent.use_count() << endl;
	cout << "pChild's use_count = " << pChild.use_count() << endl;

	//weak_ptr = shared_ptr;
	pParent->_pChild = pChild;//弱引用智能指针, 复制或者赋值不会导致引用计数加1
	pChild->_pParent = pParent;
	cout << " 赋值操作以后: " << endl;
	cout << "pParent's use_count = " << pParent.use_count() << endl;
	cout << "pChild's use_count = " << pChild.use_count() << endl;

	return 0;
}
